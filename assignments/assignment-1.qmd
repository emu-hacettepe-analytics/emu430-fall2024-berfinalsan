---
title: "Assignment 1"
---
# Assşgment 1

My first assigment has two parts:

## (a)

Here is the video I have watched: [Veri Bilimi ve Endüstri Mühendisliği Üzerine Sohbetler - Baykal Hafızoğlu & Erdi Daşdemir] (https://www.youtube.com/watch?v=tV_0pHSdLAM&ab_channel=ErdiDasdemir)

**Summary**

First, Baykal Hafızoğlu introduced himself, sharing details about his academic background, work experience, and personal interests. He discussed various projects he had been involved in and mentioned that he was both the creator and developer of a program called Supply Chain Solver. Next, he delved into the world of data analytics, breaking it down into four categories: Descriptive, Diagnostic, Predictive, and Prescriptive. He even likened Prescriptive Analytics to a doctor writing a prescription. He linked these categories of analytics to industrial engineering courses, highlighting the significance of understanding these connections. Then, he discussed analytical methods and solutions, offering examples from daily life to illustrate analytical approaches. He also shared insights from his experiences, recommending that one should always begin by clearly defining the problem. Furthermore, he suggested revisiting the original problem definition after completing the work to ensure clarity. Lastly, he answered questions from students.

## **Questions**

Multiple choice question:

**1)** What are the 4 main headings of looking at the world of analytics?

A) Descriptive, Diagnostic, Statistical, Operational
B) Predictive, Prescriptive, Diagnostic, Descriptive
C) Quantitative, Qualitative, Descriptive, Predictive
D) Operational, Prescriptive, Statistical, Predictive

Answer: B

Open-ended question:

**2)** In predictive analytics, when are simulation, regression, machine learning, and clustering techniques preferred, and what advantages does each provide?

Answer: Simulation, regression, machine learning, and clustering are preferred in predictive analytics under different circumstances:
Simulation: Ideal for testing potential future scenarios.
Regression: Shapes predictions by analyzing relationships between variables.
Machine Learning: Increases prediction accuracy in large datasets.
Clustering: Supports analyses like customer segmentation by identifying similar groups.
Each technique enhances the effectiveness of analyses in specific contexts.

## (b)

In the second part of the assignment, I have completed some tasks:

* Import the “polls_us_election_2016” data set from the dslabs package.

'''{r chunk_1}
library(dslabs)
data("polls_us_election_2016")
'''

* Display the first 10 rows of the data set.

'''{r chunk_2}
first_ten_row <- head(polls_us_election_2016,10)
print(first_ten_row)
'''

* Calculate and display the total number of NA values in the entire data set.

'''{r}
total_na <- sum(is.na(polls_us_election_2016))
total_na
'''

* Replace all NA values in the “polls_us_election_2016” data set as follows: For numeric columns, replace NA values with your birth year. For character or factor columns, replace NA values with your first name. Store the modified data set as a new object.Print the first ten rows of the new data frame.

'''{r}
birth_year <- 2003
first_name <- "Berfin"

no_nas_data <- polls_us_election_2016

for (col in names(no_nas_data)) { # Convert factor columns to character to prevent coercion issues.
  if (is.factor(no_nas_data[[col]])) {
    no_nas_data[[col]] <- as.character(no_nas_data[[col]])
  }
  # Check if the column is numeric.
  if (is.numeric(no_nas_data[[col]])) {
    # Replace NA values with the birth year.
    no_nas_data[[col]] <- ifelse(is.na(no_nas_data[[col]]), birth_year, no_nas_data[[col]])
    # Check if the column is character or already a character (after conversion).
  } else if (is.character(no_nas_data[[col]])) {
    # Replace NA values with the first name.
    no_nas_data[[col]] <- ifelse(is.na(no_nas_data[[col]]), first_name, no_nas_data[[col]])
  }
  # No need for an else statement since we do nothing for other column types
}

new_first_ten_row <- head(no_nas_data, 10)
new_first_ten_row
'''

* Print the total number of NAs remaining in the new data frame.

'''{r}
total_na<-sum(is.na(no_nas_data))
total_na
'''
